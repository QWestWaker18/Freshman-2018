/*----------------------------------------------------------------------------*/
/* Copyright (c) 2017-2018 FIRST. All Rights Reserved.                        */
/* Open Source Software - may be modified and shared by FRC teams. The code   */
/* must be accompanied by the FIRST BSD license file in the root directory of */
/* the project.                                                               */
/*----------------------------------------------------------------------------*/
package org.usfirst.frc.team20.robot;
import com.ctre.phoenix.motorcontrol.ControlMode;
import com.ctre.phoenix.motorcontrol.can.TalonSRX;
import edu.wpi.first.wpilibj.IterativeRobot;
import edu.wpi.first.wpilibj.Joystick;
import edu.wpi.first.wpilibj.Spark;
import edu.wpi.first.wpilibj.Timer;
import edu.wpi.first.wpilibj.drive.DifferentialDrive;
public class Robot extends IterativeRobot {
 Controller driverJoy;
 Controller operatorJoy;
 TalonSRX bl = new TalonSRX(1);
 TalonSRX br = new TalonSRX(2);
 TalonSRX fl = new TalonSRX(4);
 TalonSRX fr = new TalonSRX(3);
 Timer c = new Timer();
 
 //encEXAMPLE = new Encoder(digital port 1(int), digital port 2(int), invert direction(boolean), EncodingType);
 //Encoder sampleEncoder = new Encoder(0, 1, false, Encoder.EncodingType.k4X);
 //sampleEncoder.reset();
 
 @Override
 public void robotInit() {
  driverJoy = new Controller(0);
  operatorJoy = new Controller(1);
 }
 @Override
 public void autonomousInit() {
  c.start();
 }
 
 @Override
 public void autonomousPeriodic(){
  
  boolean rightDesired=true;//if our alliance color starts on the right side of the switch, this will be true, other wise it will be false
  //This is a boolean that represents the input we will get from the field. I'm not sure how to get it yet but this will allow us to make our autos for it. It's a work in progress. :)
  int autoChoice=0;
  double timeStamp;
  switch(autoChoice) {
   case 0://forward drive into the switch from middle position
    
    timeStamp=5.25;//this will get us across the line;
    //starts the timer
    if(c.get() < timeStamp){//while the game timer is less than our time stamp
     bl.set(ControlMode.PercentOutput, -0.25); //move forward
     fl.set(ControlMode.PercentOutput, -0.25);
     fr.set(ControlMode.PercentOutput, 0.25);
     br.set(ControlMode.PercentOutput, 0.25);
    }else{
    bl.set(ControlMode.PercentOutput, 0); //STAHPP
    fl.set(ControlMode.PercentOutput, 0);
    fr.set(ControlMode.PercentOutput, 0);
    br.set(ControlMode.PercentOutput, 0);
    }
    
    //drop the cube
    
   case 1://forward drive and turn left when starting from the right side (rightDesired==true)
    
    timeStamp=6;//six seconds will get us across the line and next to the switch


    //starts the timer
    if(c.get() < timeStamp){//while the game timer is less than our time stamp
     bl.set(ControlMode.PercentOutput, -0.25); //move forward
     fl.set(ControlMode.PercentOutput, -0.25);
     fr.set(ControlMode.PercentOutput, 0.25);
     br.set(ControlMode.PercentOutput, 0.25);
    }else{
    bl.set(ControlMode.PercentOutput, 0); //STAHPP
    fl.set(ControlMode.PercentOutput, 0);
    fr.set(ControlMode.PercentOutput, 0);
    br.set(ControlMode.PercentOutput, 0);
    }
    
    //turn the robot 90 degrees left (can we use encoders to figure out how much/how long we need to turn?)
    bl.set(ControlMode.PercentOutput,.25);
    fl.set(ControlMode.PercentOutput,.25);
    fr.set(ControlMode.PercentOutput,.25);
    br.set(ControlMode.PercentOutput,.25);
    
    //drop the cube
    
   case 2://forward drive and turn right when starting from the left side (rightDesired==false)
    
    timeStamp=6;//FIVE seconds will get us across the line;
    //starts the timer
    if(c.get() < timeStamp){//while the game timer is less than our time stamp
     bl.set(ControlMode.PercentOutput, -0.25); //move forward
     fl.set(ControlMode.PercentOutput, -0.25);
     fr.set(ControlMode.PercentOutput, 0.25);
     br.set(ControlMode.PercentOutput, 0.25);
    }else{
    bl.set(ControlMode.PercentOutput, 0); //STAHPP
    fl.set(ControlMode.PercentOutput, 0);
    fr.set(ControlMode.PercentOutput, 0);
    br.set(ControlMode.PercentOutput, 0);
    }
    
    //turn the robot 90 degrees right
    
    //drop the cube
    
   case 3://drive to the exchange zone and drop preload when starting from left position
    
   case 4://drive to the exchange zone and drop preload when starting from middle position
    
   case 5://drive to the exchange zone and drop preload when starting from right position
  }
 }
 @Override
 public void teleopPeriodic() {
  
  //Joysticks and Back Buttons
  double left = driverJoy.getLeftYAxis();
  double right = driverJoy.getRightYAxis();
  double leftTurn = -(driverJoy.getLeftTriggerAxis()); //Left/Right Joystick Looking Things
  double rightTurn= -(driverJoy.getRightTriggerAxis());   //These are inverted to accomodate for correct turning -Liam
  
  //Tank Mode (Unactivated)
  /*
  bl.set(ControlMode.PercentOutput, -left);    
  fl.set(ControlModeY.PercentOutput, -left);
  fr.set(ControlMode.PercentOutput, right);
  br.set(ControlMode.PercentOutput, right);
  */
  
  //Arcade Mode
  bl.set(ControlMode.PercentOutput, left - rightTurn + leftTurn); //Setting left and right talon motor things (Arcade)
  fl.set(ControlMode.PercentOutput, left - rightTurn + leftTurn);
  fr.set(ControlMode.PercentOutput, -left - rightTurn + leftTurn);
  br.set(ControlMode.PercentOutput, -left - rightTurn + leftTurn);
 }
}
